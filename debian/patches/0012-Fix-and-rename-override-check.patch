From: Jason Rhinelander <jason@imaginary.ca>
Date: Thu, 9 Jul 2020 22:46:50 -0300
Subject: Fix (and rename) override check

Fix inverted logic, and rename it to something more descriptive.
---
 src/crypto/cn_heavy_hash.hpp            | 2 +-
 src/crypto/cn_heavy_hash_hard_arm.cpp   | 2 +-
 src/crypto/cn_heavy_hash_hard_intel.cpp | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/crypto/cn_heavy_hash.hpp b/src/crypto/cn_heavy_hash.hpp
index a5557db..0070378 100644
--- a/src/crypto/cn_heavy_hash.hpp
+++ b/src/crypto/cn_heavy_hash.hpp
@@ -45,7 +45,7 @@
 #endif
 
 #if defined(HAS_INTEL_HW) || defined(HAS_ARM_HW)
-inline bool check_override()
+inline bool force_software_aes()
 {
 	const char *env = getenv("LOKI_USE_SOFTWARE_AES");
 	return env && strcmp(env, "0") && strcmp(env, "no");
diff --git a/src/crypto/cn_heavy_hash_hard_arm.cpp b/src/crypto/cn_heavy_hash_hard_arm.cpp
index 050d524..3bd82a7 100644
--- a/src/crypto/cn_heavy_hash_hard_arm.cpp
+++ b/src/crypto/cn_heavy_hash_hard_arm.cpp
@@ -49,7 +49,7 @@ static bool hw_check_aes()
 	return (getauxval(AT_HWCAP) & HWCAP_AES) != 0;
 }
 
-extern "C" const bool cpu_aes_enabled = hw_check_aes() && check_override();
+extern "C" const bool cpu_aes_enabled = hw_check_aes() && !force_software_aes();
 
 extern const uint8_t saes_sbox[256];
 
diff --git a/src/crypto/cn_heavy_hash_hard_intel.cpp b/src/crypto/cn_heavy_hash_hard_intel.cpp
index 6cdf94d..a6cad02 100644
--- a/src/crypto/cn_heavy_hash_hard_intel.cpp
+++ b/src/crypto/cn_heavy_hash_hard_intel.cpp
@@ -65,7 +65,7 @@ static bool hw_check_aes()
 	return (cpu_info[2] & (1 << 25)) != 0;
 }
 
-extern "C" const bool cpu_aes_enabled = hw_check_aes() && check_override();
+extern "C" const bool cpu_aes_enabled = hw_check_aes() && !force_software_aes();
 
 #if !defined(_LP64) && !defined(_WIN64)
 #define BUILD32
